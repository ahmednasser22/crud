{"version":3,"sources":["components/addName.js","components/showNames.js","App.js","serviceWorker.js","index.js"],"names":["addName","props","onSubmit","className","type","name","value","current","onChange","updateName","placeholder","Shownames","state","isEdit","renderName","nameItemFromApp","onClick","deleteName","index","toggleState","newisEdit","setState","e","preventDefault","editName","input","renderUpdateNameForm","ref","v","defaultValue","this","Component","App","names","target","newnames","push","alert","window","confirm","splice","allNames","selectedName","namelist","length","map","nameitem","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3cd2eb5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './addname.css';\r\nconst addName = (props) => {\r\n    return (\r\n        <form onSubmit = {props.addName} className = \"addname\">\r\n            <input type = \"text\" name = \"input\" value = {props.current} onChange = {props.updateName} placeholder = \" Type here ..\"/>\r\n            <button type = \"submit\">add name</button>\r\n        </form>\r\n    );\r\n}\r\nexport default addName;","import React, { Component, Fragment } from 'react';\r\nimport './shownames.css';\r\nclass Shownames extends Component {\r\n    state = {\r\n        isEdit: false\r\n    }\r\n    //render name item\r\n    renderName = () => {\r\n        return (\r\n            <li>\r\n                <span className= \"name\">{this.props.nameItemFromApp.name}</span>\r\n                <div className = \"btnsDiv\">\r\n                <span><button onClick={() => this.props.deleteName(this.props.index)}>Delete Name</button></span>\r\n                <span><button onClick={() => this.toggleState()}>Edit Name</button></span>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    //toggle state\r\n    toggleState = () => {\r\n        let newisEdit = this.state.isEdit;\r\n        this.setState({\r\n            isEdit: !newisEdit\r\n        });\r\n    }\r\n\r\n    //edit name\r\n    updateName = (e) => {\r\n        e.preventDefault();\r\n        this.props.editName(this.props.index , this.input.value);\r\n        this.toggleState();\r\n    }\r\n\r\n    //render edit name form\r\n    renderUpdateNameForm = () => {\r\n        return (\r\n            <form onSubmit={this.updateName} className = \"editname\">\r\n                <input type=\"text\" ref ={(v => {this.input = v})} defaultValue={this.props.nameItemFromApp.name} />\r\n                <button>Update Name</button>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                {this.state.isEdit ? this.renderUpdateNameForm() : this.renderName()}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\nexport default Shownames;","import React, { Component } from 'react';\nimport Addname from './components/addName';\nimport Shownames from './components/showNames';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    names: [\n      { name: \"ahmed\" },\n      { name: \"mohamed\" },\n      { name: \"ali\" }\n    ],\n    current: ''\n  }\n\n  //update name\n  updateName = (e) => {\n    this.setState({\n      current: e.target.value\n    })\n  }\n\n  //add name\n  addName = (e) => {\n    e.preventDefault();\n    if (e.target.input.value) {\n      let current = this.state.current;\n      let newnames = this.state.names;\n      newnames.push({ name: current });\n\n      this.setState({\n        names: newnames,\n        current: ''\n      });\n\n    } else {\n      alert(\"Please enter the name !\");\n    }\n  }\n\n  //delete name\n  deleteName = (index) => {\n    if(window.confirm(\"Are you sure ?\")){\n    let newnames = this.state.names;\n    newnames.splice(index, 1);\n    this.setState({\n      names: newnames\n    });\n  }\n  }\n\n  //edit name\n  editName = (index, value) => {\n    if(window.confirm(\"Are you sure ?\")){\n    let allNames = this.state.names;\n    let selectedName = allNames[index];\n    (value)  ? selectedName[\"name\"] = value : alert(\"Please enter valid\");\n    this.setState({\n      names: allNames\n    });\n  }\n  }\n\n  render() {\n\n    const allNames = this.state.names;\n    const namelist = (allNames.length) ? allNames.map((nameitem, index) => {\n      return <Shownames nameItemFromApp={nameitem} key={index} index={index} deleteName={this.deleteName} editName={this.editName} />\n    }) : (<p>No names to show</p>)\n\n    return (\n      <div className=\"App\">\n        <h2>add names</h2>\n        <Addname current={this.state.current} updateName={this.updateName} addName={this.addName} />\n        <ul>{namelist}</ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}